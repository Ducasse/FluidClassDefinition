Class {
	#name : #OldPharoClassDefinitionPrinter,
	#superclass : #ClassDefinitionPrinter,
	#category : #'FluidClassDefinition-Printer-UnderDev'
}

{ #category : #delegating }
OldPharoClassDefinitionPrinter >> classDefinitionParserClass [

	^ CDClassDefinitionParser
]

{ #category : #delegating }
OldPharoClassDefinitionPrinter >> classDefinitionString [

	| poolString stream |
	poolString := forClass sharedPoolsString.
	stream := (String new: 800) writeStream.
	forClass superclass
		ifNotNil: [ stream nextPutAll: forClass superclass name ]
		ifNil: [ stream nextPutAll: 'ProtoObject' ].
	
	stream
		nextPutAll: forClass kindOfSubclass;
		store: forClass name.
		
	forClass hasTraitComposition ifTrue: [ 
		stream
			crtab;
			nextPutAll: 'uses: ';
			nextPutAll: forClass traitCompositionString ].
	
	stream
		crtab;
		nextPutAll: 'instanceVariableNames: '''.
	forClass instanceVariablesOn: stream.
	stream nextPut: $'.
	
	stream
		crtab;
		nextPutAll: 'classVariableNames: '''.
	forClass classVariablesOn: stream.
	stream nextPut: $'.
	
	poolString = '' ifFalse: [ 
		stream 
			crtab;
			nextPutAll: 'poolDictionaries: ';
			store: poolString ].
	
	stream
		crtab;
		nextPutAll: 'package: ';
		store: forClass category asString.
		
	forClass superclass ifNil: [ 
		stream
			nextPutAll: '.';
			cr.
		stream 
			nextPutAll: forClass name.
		stream
			space;
			nextPutAll: 'superclass: nil' ].

	^ stream contents
]

{ #category : #delegating }
OldPharoClassDefinitionPrinter >> metaclassDefinitionString [ 
	"Next step
		- some of the methods defined on classe will have to be moved in this class.
		- refactor to remove duplication with metaclass,...."

	^ String streamContents: [:stream |
		stream print: forClass.
		stream
			crtab;
			nextPutAll: 'instanceVariableNames: '''.
		forClass instanceVariablesOn: stream.
		stream nextPut: $' ]
]

{ #category : #delegating }
OldPharoClassDefinitionPrinter >> traitDefinitionString [ 
	"Next step
		- some of the methods defined on classe will have to be moved in this class.
		- refactor to remove duplication with metaclass,...."

	(forClass instanceSide name == #Trait) ifTrue: [ ^ self classDefinitionString ].

	^ String streamContents: [ :s | 
		s 
			nextPutAll: 'Trait named: ';
			nextPutAll:	forClass name printString;
			cr; tab; 
			nextPutAll: ' uses: ';
			nextPutAll: forClass traitComposition traitCompositionExpression; 
			cr.
		forClass classLayout visibleSlots ifNotEmpty: [ 
			s tab; nextPutAll: ' slots: ';
			nextPutAll: forClass slotDefinitionString; cr. ].
		s tab; nextPutAll: ' package: ';
			nextPutAll: forClass category asString printString
	]
]

{ #category : #delegating }
OldPharoClassDefinitionPrinter >> traitedMetaclassDefinitionString [ 
	"Next step
		- some of the methods defined on classe will have to be moved in this class.
		- refactor to remove duplication with metaclass,...."

	^ String streamContents: [:strm |
			strm print: forClass.
			forClass hasTraitComposition ifTrue: [
				strm
					crtab;
					nextPutAll: 'uses: ';
					print: forClass traitComposition ].
			strm
				crtab;
				nextPutAll: 'instanceVariableNames: ';
				store: forClass instanceVariablesString ] 
]
